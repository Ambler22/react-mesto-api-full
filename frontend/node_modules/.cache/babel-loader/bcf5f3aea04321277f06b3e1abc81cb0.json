{"ast":null,"code":"class Api {\n  constructor(config) {\n    this._checkToken = headers => {\n      const token = localStorage.getItem('jwt');\n\n      if (token) {\n        headers['autorization'] = `Bearer ${token}`;\n      }\n\n      return headers;\n    };\n\n    this.url = config.url;\n    this.headers = config.headers;\n  }\n\n  _getResponseData(res) {\n    if (!res.ok) {\n      return Promise.reject(`Ошибка: ${res.status}`);\n    }\n\n    return res.json();\n  }\n\n  getUserInfo() {\n    return fetch(`${this.url}/users/me`, {\n      credentials: 'include',\n      headers: this._checkToken(this.headers)\n    }).then(res => this._getResponseData(res));\n  }\n\n  getCards() {\n    return fetch(`${this.url}/cards`, {\n      credentials: 'include',\n      headers: this._checkToken(this.headers)\n    }).then(res => this._getResponseData(res));\n  }\n\n  setUserInfo(data) {\n    return fetch(`${this.url}/users/me`, {\n      method: 'PATCH',\n      credentials: 'include',\n      headers: this._checkToken(this.headers),\n      body: JSON.stringify({\n        name: data.name,\n        about: data.about\n      })\n    }).then(res => this._getResponseData(res));\n  }\n\n  setUserAvatar(data) {\n    return fetch(`${this.url}/users/me/avatar`, {\n      method: 'PATCH',\n      credentials: 'include',\n      headers: this._checkToken(this.headers),\n      body: JSON.stringify({\n        avatar: data\n      })\n    }).then(res => this._getResponseData(res));\n  }\n\n  setCards(data) {\n    return fetch(`${this.url}/cards`, {\n      method: 'POST',\n      credentials: 'include',\n      headers: this._checkToken(this.headers),\n      body: JSON.stringify({\n        name: data.name,\n        link: data.link\n      })\n    }).then(res => this._getResponseData(res));\n  }\n\n  deleteCard(cardId) {\n    return fetch(`${this.url}/cards/${cardId}`, {\n      method: 'DELETE',\n      credentials: 'include',\n      headers: this._checkToken(this.headers)\n    }).then(res => this._getResponseData(res));\n  }\n\n  setLike(cardId) {\n    return fetch(`${this.url}/cards/${cardId}/likes`, {\n      method: 'PUT',\n      credentials: 'include',\n      headers: this._checkToken(this.headers)\n    }).then(res => this._getResponseData(res));\n  }\n\n  deleteLike(cardId) {\n    return fetch(`${this.url}/cards/${cardId}/likes`, {\n      method: 'DELETE',\n      credentials: 'include',\n      headers: this._checkToken(this.headers)\n    }).then(res => this._getResponseData(res));\n  }\n\n}\n\nconst api = new Api({\n  // url: 'https://nomoreparties.co/v1/cohort-26',\n  url: 'http://localhost:3001',\n  headers: {\n    // authorization: '071ec2e0-6b59-41c1-9439-d0b2ee95bfc8',\n    'Content-Type': 'application/json'\n  }\n});\nexport default api;","map":{"version":3,"sources":["/Users/RomanDrozdov/Documents/praktikum/react-mesto-auth/src/utils/api.js"],"names":["Api","constructor","config","_checkToken","headers","token","localStorage","getItem","url","_getResponseData","res","ok","Promise","reject","status","json","getUserInfo","fetch","credentials","then","getCards","setUserInfo","data","method","body","JSON","stringify","name","about","setUserAvatar","avatar","setCards","link","deleteCard","cardId","setLike","deleteLike","api"],"mappings":"AAAA,MAAMA,GAAN,CAAU;AACNC,EAAAA,WAAW,CAACC,MAAD,EAAS;AAAA,SA6FxBC,WA7FwB,GA6FTC,OAAD,IAAa;AACvB,YAAMC,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,KAArB,CAAd;;AAEA,UAAIF,KAAJ,EAAW;AACPD,QAAAA,OAAO,CAAC,cAAD,CAAP,GAA2B,UAASC,KAAM,EAA1C;AACH;;AACD,aAAOD,OAAP;AACH,KApGuB;;AAChB,SAAKI,GAAL,GAAWN,MAAM,CAACM,GAAlB;AACA,SAAKJ,OAAL,GAAeF,MAAM,CAACE,OAAtB;AACH;;AAELK,EAAAA,gBAAgB,CAACC,GAAD,EAAM;AAClB,QAAI,CAACA,GAAG,CAACC,EAAT,EAAa;AACT,aAAOC,OAAO,CAACC,MAAR,CAAgB,WAAUH,GAAG,CAACI,MAAO,EAArC,CAAP;AACH;;AACD,WAAOJ,GAAG,CAACK,IAAJ,EAAP;AACH;;AAEDC,EAAAA,WAAW,GAAG;AACV,WAAOC,KAAK,CAAE,GAAE,KAAKT,GAAI,WAAb,EAAyB;AACjCU,MAAAA,WAAW,EAAE,SADoB;AAEjCd,MAAAA,OAAO,EAAE,KAAKD,WAAL,CAAiB,KAAKC,OAAtB;AAFwB,KAAzB,CAAL,CAINe,IAJM,CAIDT,GAAG,IAAI,KAAKD,gBAAL,CAAsBC,GAAtB,CAJN,CAAP;AAKH;;AAEDU,EAAAA,QAAQ,GAAG;AACP,WAAOH,KAAK,CAAE,GAAE,KAAKT,GAAI,QAAb,EAAsB;AAC9BU,MAAAA,WAAW,EAAE,SADiB;AAE9Bd,MAAAA,OAAO,EAAE,KAAKD,WAAL,CAAiB,KAAKC,OAAtB;AAFqB,KAAtB,CAAL,CAINe,IAJM,CAIDT,GAAG,IAAI,KAAKD,gBAAL,CAAsBC,GAAtB,CAJN,CAAP;AAKH;;AAEDW,EAAAA,WAAW,CAACC,IAAD,EAAO;AACd,WAAOL,KAAK,CAAE,GAAE,KAAKT,GAAI,WAAb,EAAyB;AACjCe,MAAAA,MAAM,EAAE,OADyB;AAEjCL,MAAAA,WAAW,EAAE,SAFoB;AAGjCd,MAAAA,OAAO,EAAE,KAAKD,WAAL,CAAiB,KAAKC,OAAtB,CAHwB;AAIjCoB,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACjBC,QAAAA,IAAI,EAAEL,IAAI,CAACK,IADM;AAEjBC,QAAAA,KAAK,EAAEN,IAAI,CAACM;AAFK,OAAf;AAJ2B,KAAzB,CAAL,CASNT,IATM,CASDT,GAAG,IAAI,KAAKD,gBAAL,CAAsBC,GAAtB,CATN,CAAP;AAUH;;AAEDmB,EAAAA,aAAa,CAACP,IAAD,EAAO;AAChB,WAAOL,KAAK,CAAE,GAAE,KAAKT,GAAI,kBAAb,EAAgC;AACxCe,MAAAA,MAAM,EAAE,OADgC;AAExCL,MAAAA,WAAW,EAAE,SAF2B;AAGxCd,MAAAA,OAAO,EAAE,KAAKD,WAAL,CAAiB,KAAKC,OAAtB,CAH+B;AAIxCoB,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACjBI,QAAAA,MAAM,EAAER;AADS,OAAf;AAJkC,KAAhC,CAAL,CAQNH,IARM,CAQDT,GAAG,IAAI,KAAKD,gBAAL,CAAsBC,GAAtB,CARN,CAAP;AASH;;AAEDqB,EAAAA,QAAQ,CAACT,IAAD,EAAO;AACX,WAAOL,KAAK,CAAE,GAAE,KAAKT,GAAI,QAAb,EAAsB;AAC9Be,MAAAA,MAAM,EAAE,MADsB;AAE9BL,MAAAA,WAAW,EAAE,SAFiB;AAG9Bd,MAAAA,OAAO,EAAE,KAAKD,WAAL,CAAiB,KAAKC,OAAtB,CAHqB;AAI9BoB,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACjBC,QAAAA,IAAI,EAAEL,IAAI,CAACK,IADM;AAEjBK,QAAAA,IAAI,EAAEV,IAAI,CAACU;AAFM,OAAf;AAJwB,KAAtB,CAAL,CASNb,IATM,CASDT,GAAG,IAAI,KAAKD,gBAAL,CAAsBC,GAAtB,CATN,CAAP;AAUH;;AAEDuB,EAAAA,UAAU,CAACC,MAAD,EAAS;AACf,WAAOjB,KAAK,CAAE,GAAE,KAAKT,GAAI,UAAS0B,MAAO,EAA7B,EAAgC;AACxCX,MAAAA,MAAM,EAAE,QADgC;AAExCL,MAAAA,WAAW,EAAE,SAF2B;AAGxCd,MAAAA,OAAO,EAAE,KAAKD,WAAL,CAAiB,KAAKC,OAAtB;AAH+B,KAAhC,CAAL,CAKFe,IALE,CAKGT,GAAG,IAAI,KAAKD,gBAAL,CAAsBC,GAAtB,CALV,CAAP;AAMH;;AAEDyB,EAAAA,OAAO,CAACD,MAAD,EAAS;AACZ,WAAOjB,KAAK,CAAE,GAAE,KAAKT,GAAI,UAAS0B,MAAO,QAA7B,EAAsC;AAC9CX,MAAAA,MAAM,EAAE,KADsC;AAE9CL,MAAAA,WAAW,EAAE,SAFiC;AAG9Cd,MAAAA,OAAO,EAAE,KAAKD,WAAL,CAAiB,KAAKC,OAAtB;AAHqC,KAAtC,CAAL,CAKNe,IALM,CAKDT,GAAG,IAAI,KAAKD,gBAAL,CAAsBC,GAAtB,CALN,CAAP;AAMH;;AAED0B,EAAAA,UAAU,CAACF,MAAD,EAAS;AACf,WAAOjB,KAAK,CAAE,GAAE,KAAKT,GAAI,UAAS0B,MAAO,QAA7B,EAAsC;AAC9CX,MAAAA,MAAM,EAAE,QADsC;AAE9CL,MAAAA,WAAW,EAAE,SAFiC;AAG9Cd,MAAAA,OAAO,EAAE,KAAKD,WAAL,CAAiB,KAAKC,OAAtB;AAHqC,KAAtC,CAAL,CAKNe,IALM,CAKDT,GAAG,IAAI,KAAKD,gBAAL,CAAsBC,GAAtB,CALN,CAAP;AAMH;;AA5FS;;AAyGV,MAAM2B,GAAG,GAAG,IAAIrC,GAAJ,CAAS;AACjB;AACAQ,EAAAA,GAAG,EAAE,uBAFY;AAGjBJ,EAAAA,OAAO,EAAE;AACP;AACA,oBAAgB;AAFT;AAHQ,CAAT,CAAZ;AASA,eAAeiC,GAAf","sourcesContent":["class Api {\n    constructor(config) {\n        this.url = config.url;\n        this.headers = config.headers;\n    }\n\n_getResponseData(res) {\n    if (!res.ok) {\n        return Promise.reject(`Ошибка: ${res.status}`);\n    }\n    return res.json();\n}\n\ngetUserInfo() {\n    return fetch(`${this.url}/users/me`, {\n        credentials: 'include',\n        headers: this._checkToken(this.headers),\n    })\n    .then(res => this._getResponseData(res));\n};\n\ngetCards() {\n    return fetch(`${this.url}/cards`, {\n        credentials: 'include',\n        headers: this._checkToken(this.headers),\n    })\n    .then(res => this._getResponseData(res));\n};\n\nsetUserInfo(data) {\n    return fetch(`${this.url}/users/me`, {\n        method: 'PATCH',\n        credentials: 'include',\n        headers: this._checkToken(this.headers),\n        body: JSON.stringify({\n            name: data.name,\n            about: data.about,\n        })\n    })\n    .then(res => this._getResponseData(res));\n}\n\nsetUserAvatar(data) {\n    return fetch(`${this.url}/users/me/avatar`, {\n        method: 'PATCH',\n        credentials: 'include',\n        headers: this._checkToken(this.headers),\n        body: JSON.stringify({\n            avatar: data,\n        })\n    })\n    .then(res => this._getResponseData(res));\n}\n\nsetCards(data) {\n    return fetch(`${this.url}/cards`, {\n        method: 'POST',\n        credentials: 'include',\n        headers: this._checkToken(this.headers),\n        body: JSON.stringify({\n            name: data.name,\n            link: data.link,\n        })\n    })\n    .then(res => this._getResponseData(res));\n}\n\ndeleteCard(cardId) {\n    return fetch(`${this.url}/cards/${cardId}`, {\n        method: 'DELETE',\n        credentials: 'include',\n        headers: this._checkToken(this.headers),\n        })\n        .then(res => this._getResponseData(res));\n}\n\nsetLike(cardId) {\n    return fetch(`${this.url}/cards/${cardId}/likes`, {\n        method: 'PUT',\n        credentials: 'include',\n        headers: this._checkToken(this.headers),\n    })\n    .then(res => this._getResponseData(res));\n}\n\ndeleteLike(cardId) {\n    return fetch(`${this.url}/cards/${cardId}/likes`, {\n        method: 'DELETE',\n        credentials: 'include',\n        headers: this._checkToken(this.headers),\n    })\n    .then(res => this._getResponseData(res));\n}\n\n_checkToken = (headers) => {\n    const token = localStorage.getItem('jwt');\n\n    if (token) {\n        headers['autorization'] = `Bearer ${token}`;\n    }\n    return headers;\n}\n\n}\n\nconst api = new Api ({\n    // url: 'https://nomoreparties.co/v1/cohort-26',\n    url: 'http://localhost:3001',\n    headers: {\n      // authorization: '071ec2e0-6b59-41c1-9439-d0b2ee95bfc8',\n      'Content-Type': 'application/json'\n    }\n});\n\nexport default api;"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/Users/RomanDrozdov/Documents/praktikum/react-mesto-auth/src/components/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { Route, Switch, Redirect, useHistory } from 'react-router-dom';\nimport Header from './Header';\nimport Main from './Main';\nimport Footer from './Footer';\nimport EditAvatarPopup from './EditAvatarPopup';\nimport EditProfilePopup from './EditProfilePopup';\nimport AddCardPopup from './AddPlacePopup';\nimport DeleteCardPopup from './DeleteCardPopup';\nimport ImagePopup from './ImagePopup';\nimport api from '../utils/api.js';\nimport { CurrentUserContext } from '../contexts/CurrentUserContext';\nimport Login from './Login';\nimport Register from \"./Register\";\nimport ProtectedRoute from './ProtectedRoute';\nimport InfoTooltip from './InfoTooltip';\nimport * as auth from \"./auth\";\nimport Success from \"../images/success.svg\";\nimport Fail from \"../images/fail.svg\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const history = useHistory();\n  const [currentUser, setCurrentUser] = React.useState({});\n  const [isEditProfilePopupOpen, setIsEditProfilePopupOpen] = React.useState(false);\n  const [isEditAvatarPopupOpen, setIsEditAvatarPopupOpen] = React.useState(false);\n  const [isAddPlacePopupOpen, setIsAddPlacePopupOpen] = React.useState(false);\n  const [isNotifyPopupOpen, setIsNotifyPopupOpen] = React.useState(false);\n  const [notifyPopupInfo, setNotifyPopupInfo] = React.useState({});\n  const [selectedCard, setSelectedCard] = React.useState({});\n  const [cards, setCards] = React.useState([]);\n  const [isLoggedIn, setIsLoggedIn] = React.useState(false);\n  const [email, setEmail] = React.useState();\n  React.useEffect(() => {\n    Promise.all([api.getUserInfo(), api.getCards()]).then(([userData, cards]) => {\n      setCurrentUser(userData);\n      setCards(cards);\n    }).catch(err => {\n      console.log(err);\n    });\n  }, []);\n  React.useEffect(() => {\n    const jwt = localStorage.getItem('jwt');\n\n    if (jwt) {\n      auth.getContent(jwt).then(res => {\n        console.log(res);\n\n        if (res) {\n          setIsLoggedIn(true);\n          history.push('/');\n        }\n      }).catch(err => {\n        console.log(err);\n      });\n    }\n  }, [isLoggedIn, history]);\n\n  function registration(email, password) {\n    auth.register(email, password).then(res => {\n      if (res.status === 200) {\n        changeInfoPopup({\n          path: Success,\n          text: 'Вы успешно зарегистрировались!'\n        });\n        handleNotifyPopupOpen();\n        return res.json();\n      }\n    }).catch(err => {\n      changeInfoPopup({\n        path: Fail,\n        text: 'Что-то пошло не так! Попробуйте ещё раз.'\n      });\n      handleNotifyPopupOpen();\n      console.log(err);\n    });\n  }\n\n  function authorize(email, password) {\n    auth.authorize(email, password);\n\n    if (email !== email) {\n      setEmail(email);\n    }\n\n    setIsLoggedIn(true);\n    history.push('/');\n  }\n\n  function handleNotifyPopupOpen() {\n    setIsNotifyPopupOpen(true);\n  }\n\n  function changeInfoPopup({\n    path,\n    text\n  }) {\n    setNotifyPopupInfo({\n      path: path,\n      text: text\n    });\n  }\n\n  function handleEditProfileClick() {\n    setIsEditProfilePopupOpen(true);\n  }\n\n  function handleEditAvatarClick() {\n    setIsEditAvatarPopupOpen(true);\n  }\n\n  function handleAddPlaceClick() {\n    setIsAddPlacePopupOpen(true);\n  }\n\n  function handleCardClick(card) {\n    setSelectedCard({\n      name: card.name,\n      link: card.link\n    });\n  }\n\n  function handleUpdateUser(user) {\n    api.setUserInfo(user).then(userData => {\n      setCurrentUser(userData);\n      closeAllPopups();\n    }).catch(err => {\n      console.log(err);\n    });\n  }\n\n  function handleUpdateAvatar({\n    avatar\n  }) {\n    api.setUserAvatar(avatar).then(data => {\n      setCurrentUser(data);\n      closeAllPopups();\n    }).catch(err => {\n      console.log(err);\n    });\n  }\n\n  function handleCardLike(props) {\n    const isLiked = props.likes.some(i => i._id === currentUser._id); // Снова проверяем, есть ли уже лайк на этой карточке\n\n    const changeLikeCardStatus = isLiked ? api.deleteLike(props._id) : api.setLike(props._id); //if-else для лайка\n\n    changeLikeCardStatus.then(newCard => {\n      // Отправляем запрос в API и получаем обновлённые данные карточки\n      setCards(state => state.map(c => c._id === props._id ? newCard : c));\n    }).catch(err => {\n      console.log(err);\n    });\n  }\n\n  function handleCardDelete(props) {\n    api.deleteCard(props._id).then(() => {\n      setCards(state => state.filter(c => c._id !== props._id)); //с помощью filter делаем копию массива без нашей карточки\n    }).catch(err => {\n      console.log(err);\n    });\n  }\n\n  function handleAddPlaceSubmit(card) {\n    api.setCards(card).then(newCard => {\n      setCards([newCard, ...cards]);\n      closeAllPopups();\n    }).catch(err => {\n      console.log(err);\n    });\n  }\n\n  function closeAllPopups() {\n    setIsEditAvatarPopupOpen(false);\n    setIsEditProfilePopupOpen(false);\n    setIsAddPlacePopupOpen(false);\n    setSelectedCard({});\n  }\n\n  return /*#__PURE__*/_jsxDEV(CurrentUserContext.Provider, {\n    value: currentUser,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"page\",\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Switch, {\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          path: \"/singin\",\n          children: /*#__PURE__*/_jsxDEV(Login, {\n            authorize: authorize\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 199,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/singup\",\n          children: /*#__PURE__*/_jsxDEV(Register, {\n            registration: registration\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 204,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          puth: \"/\",\n          children: [\" \", isLoggedIn ? /*#__PURE__*/_jsxDEV(Redirect, {\n            to: \"/\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 209,\n            columnNumber: 34\n          }, this) : /*#__PURE__*/_jsxDEV(Redirect, {\n            to: \"singin\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 209,\n            columnNumber: 57\n          }, this), \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(ProtectedRoute, {\n          exact: true,\n          path: \"/\",\n          isLoggedIn: isLoggedIn,\n          component: Main,\n          onEditAvatar: handleEditAvatarClick,\n          onEditProfile: handleEditProfileClick,\n          onAddPlace: handleAddPlaceClick,\n          onCardClick: handleCardClick,\n          cards: cards,\n          onCardLike: handleCardLike,\n          onCardDelete: handleCardDelete\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(EditProfilePopup, {\n        isOpen: isEditProfilePopupOpen,\n        onClose: closeAllPopups,\n        onUpdateUser: handleUpdateUser\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(AddCardPopup, {\n        isOpen: isAddPlacePopupOpen,\n        onClose: closeAllPopups,\n        onAddPlace: handleAddPlaceSubmit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(ImagePopup, {\n        card: selectedCard,\n        onClose: closeAllPopups\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(DeleteCardPopup, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(EditAvatarPopup, {\n        isOpen: isEditAvatarPopupOpen,\n        onClose: closeAllPopups,\n        onUpdateAvatar: handleUpdateAvatar\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(InfoTooltip, {\n        isOpen: isNotifyPopupOpen,\n        onClose: closeAllPopups,\n        notifyPopupInfo: notifyPopupInfo\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 192,\n    columnNumber: 13\n  }, this);\n}\n\n_s(App, \"vPyUtwx+Ux6vmJeURJ0ArT+wu0w=\", false, function () {\n  return [useHistory];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/RomanDrozdov/Documents/praktikum/react-mesto-auth/src/components/App.js"],"names":["React","useState","Route","Switch","Redirect","useHistory","Header","Main","Footer","EditAvatarPopup","EditProfilePopup","AddCardPopup","DeleteCardPopup","ImagePopup","api","CurrentUserContext","Login","Register","ProtectedRoute","InfoTooltip","auth","App","history","currentUser","setCurrentUser","isEditProfilePopupOpen","setIsEditProfilePopupOpen","isEditAvatarPopupOpen","setIsEditAvatarPopupOpen","isAddPlacePopupOpen","setIsAddPlacePopupOpen","isNotifyPopupOpen","setIsNotifyPopupOpen","notifyPopupInfo","setNotifyPopupInfo","selectedCard","setSelectedCard","cards","setCards","isLoggedIn","setIsLoggedIn","email","setEmail","useEffect","Promise","all","getUserInfo","getCards","then","userData","catch","err","console","log","jwt","localStorage","getItem","getContent","res","push","registration","password","register","status","changeInfoPopup","path","Success","text","handleNotifyPopupOpen","json","Fail","authorize","handleEditProfileClick","handleEditAvatarClick","handleAddPlaceClick","handleCardClick","card","name","link","handleUpdateUser","user","setUserInfo","closeAllPopups","handleUpdateAvatar","avatar","setUserAvatar","data","handleCardLike","props","isLiked","likes","some","i","_id","changeLikeCardStatus","deleteLike","setLike","newCard","state","map","c","handleCardDelete","deleteCard","filter","handleAddPlaceSubmit"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { Route, Switch, Redirect, useHistory } from 'react-router-dom';\n\nimport Header from './Header';\nimport Main from './Main';\nimport Footer from './Footer';\nimport EditAvatarPopup from './EditAvatarPopup';\nimport EditProfilePopup from './EditProfilePopup';\nimport AddCardPopup from './AddPlacePopup';\nimport DeleteCardPopup from './DeleteCardPopup';\nimport ImagePopup from './ImagePopup';\nimport api from '../utils/api.js';\nimport { CurrentUserContext } from '../contexts/CurrentUserContext';\nimport Login from './Login';\nimport Register from \"./Register\";\nimport ProtectedRoute from './ProtectedRoute';\nimport InfoTooltip from './InfoTooltip';\nimport * as auth from \"./auth\"\nimport Success from '../images/success.svg';\nimport Fail from '../images/fail.svg'\n\n\nfunction App() {\n\n    const history = useHistory();\n\n    const [currentUser, setCurrentUser] = React.useState({});\n    const [isEditProfilePopupOpen, setIsEditProfilePopupOpen] = React.useState(false);\n    const [isEditAvatarPopupOpen, setIsEditAvatarPopupOpen] = React.useState(false);\n    const [isAddPlacePopupOpen, setIsAddPlacePopupOpen] = React.useState(false);\n    const [isNotifyPopupOpen, setIsNotifyPopupOpen] = React.useState(false);\n    const [notifyPopupInfo, setNotifyPopupInfo] = React.useState({})\n\n    const [selectedCard, setSelectedCard] = React.useState({});\n\n    const [cards, setCards] = React.useState([]);\n\n    const [isLoggedIn, setIsLoggedIn] = React.useState(false);\n\n    const [email, setEmail] = React.useState();\n\n    React.useEffect(() => {\n        Promise.all([\n            api.getUserInfo(),\n            api.getCards(),\n        ])\n            .then(([userData, cards]) => {\n                setCurrentUser(userData);\n                setCards(cards)\n            })\n            .catch((err) => {\n                console.log(err);\n            })\n    }, [])\n\n    React.useEffect(() => {\n        const jwt = localStorage.getItem('jwt');\n        if (jwt) {\n            auth.getContent(jwt)\n                .then((res) => {\n                    console.log(res)\n                    if (res) {\n                        setIsLoggedIn(true);\n                        history.push('/');\n                    }\n                })\n                .catch((err) => {\n                    console.log(err);\n                })\n        }\n    }, [isLoggedIn, history])\n\n    function registration(email, password) {\n        auth.register(email, password)\n            .then((res) => {\n                if (res.status === 200) {\n                    changeInfoPopup({\n                        path: Success,\n                        text: 'Вы успешно зарегистрировались!'\n                    })\n                    handleNotifyPopupOpen()\n                    return res.json();\n                }\n            })\n            .catch((err) => {\n                changeInfoPopup({\n                    path: Fail,\n                    text: 'Что-то пошло не так! Попробуйте ещё раз.'\n                })\n                handleNotifyPopupOpen()\n                console.log(err);\n            })\n    }\n\n    function authorize(email, password) {\n        auth.authorize(email, password)\n        if (email !== email) {\n            setEmail(email);\n        }\n        setIsLoggedIn(true);\n        history.push('/');\n    }\n\n    function handleNotifyPopupOpen() {\n        setIsNotifyPopupOpen(true);\n    }\n\n    function changeInfoPopup({ path, text }) {\n        setNotifyPopupInfo({\n            path: path,\n            text: text,\n        })\n    }\n\n    function handleEditProfileClick() {\n        setIsEditProfilePopupOpen(true);\n    }\n\n    function handleEditAvatarClick() {\n        setIsEditAvatarPopupOpen(true);\n    }\n\n    function handleAddPlaceClick() {\n        setIsAddPlacePopupOpen(true);\n    }\n\n    function handleCardClick(card) {\n        setSelectedCard({ name: card.name, link: card.link });\n    }\n\n    function handleUpdateUser(user) {\n        api.setUserInfo(user)\n            .then((userData) => {\n                setCurrentUser(userData);\n                closeAllPopups();\n            })\n            .catch((err) => {\n                console.log(err);\n            })\n    }\n\n    function handleUpdateAvatar({ avatar }) {\n        api.setUserAvatar(avatar)\n            .then((data) => {\n                setCurrentUser(data);\n                closeAllPopups();\n            })\n            .catch((err) => {\n                console.log(err);\n            })\n    }\n\n    function handleCardLike(props) {\n        const isLiked = props.likes.some(i => i._id === currentUser._id); // Снова проверяем, есть ли уже лайк на этой карточке\n        const changeLikeCardStatus = isLiked ? api.deleteLike(props._id) : api.setLike(props._id) //if-else для лайка\n        changeLikeCardStatus.then((newCard) => { // Отправляем запрос в API и получаем обновлённые данные карточки\n            setCards((state) => state.map((c) => c._id === props._id ? newCard : c));\n        })\n            .catch((err) => {\n                console.log(err);\n            })\n    }\n\n    function handleCardDelete(props) {\n        api.deleteCard(props._id).then(() => {\n            setCards((state) => state.filter((c) => c._id !== props._id)); //с помощью filter делаем копию массива без нашей карточки\n        })\n            .catch((err) => {\n                console.log(err);\n            })\n    }\n\n    function handleAddPlaceSubmit(card) {\n        api.setCards(card)\n            .then((newCard) => {\n                setCards([newCard, ...cards]);\n                closeAllPopups()\n            })\n            .catch((err) => {\n                console.log(err);\n            })\n    }\n\n    function closeAllPopups() {\n        setIsEditAvatarPopupOpen(false);\n        setIsEditProfilePopupOpen(false);\n        setIsAddPlacePopupOpen(false);\n\n        setSelectedCard({});\n    }\n\n    return (< CurrentUserContext.Provider value={currentUser} >\n        <div className=\"page\" >\n\n            <Header />\n\n            <Switch >\n                <Route path=\"/singin\">\n                    <Login\n                        authorize={authorize} />\n                </Route>\n\n                <Route path=\"/singup\" >\n                    <Register\n                        registration={registration} />\n                </Route>\n\n                <Route puth=\"/\"> {\n                    isLoggedIn ? < Redirect to=\"/\" /> : < Redirect to=\"singin\" />\n                } </Route>\n\n                <ProtectedRoute\n                    exact path=\"/\"\n                    isLoggedIn={isLoggedIn}\n                    component={Main}\n                    onEditAvatar={handleEditAvatarClick}\n                    onEditProfile={handleEditProfileClick}\n                    onAddPlace={handleAddPlaceClick}\n                    onCardClick={handleCardClick}\n\n                    cards={cards}\n                    onCardLike={handleCardLike}\n                    onCardDelete={handleCardDelete}\n                />\n            </Switch >\n\n            <Footer />\n\n            <EditProfilePopup\n                isOpen={isEditProfilePopupOpen}\n                onClose={closeAllPopups}\n                onUpdateUser={handleUpdateUser}\n            />\n\n            <AddCardPopup\n                isOpen={isAddPlacePopupOpen}\n                onClose={closeAllPopups}\n                onAddPlace={handleAddPlaceSubmit}\n            />\n\n            <ImagePopup card={selectedCard}\n                onClose={closeAllPopups}\n            />\n\n            <DeleteCardPopup />\n\n            <EditAvatarPopup\n                isOpen={isEditAvatarPopupOpen}\n                onClose={closeAllPopups}\n                onUpdateAvatar={handleUpdateAvatar}\n            />\n\n            <InfoTooltip\n                isOpen={isNotifyPopupOpen}\n                onClose={closeAllPopups}\n                notifyPopupInfo={notifyPopupInfo}\n            />\n\n        </div>\n    </CurrentUserContext.Provider>\n    );\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}